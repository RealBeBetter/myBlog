(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{655:function(s,e,t){"use strict";t.r(e);var a=t(11),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h3",{attrs:{id:"bigkey-的弊端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bigkey-的弊端"}},[s._v("#")]),s._v(" BigKey 的弊端")]),s._v(" "),t("p",[s._v("BigKey 需要解决，根源就在于 BigKey 会带来的问题。")]),s._v(" "),t("p",[t("strong",[s._v("占用内存")]),s._v("\n因为 Redis 数据结构的底层数据结构，大 Key 会占用更多的内存空间，造成更大的内存消耗。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/cab054adb3a10d9cf3d64b2c95732709.png",alt:"无标题3.png"}}),s._v(" "),t("strong",[s._v("单线程模型")]),s._v("\n因为 Redis 的通信依赖于 Socket 连接，Redis 将服务器对 Socket 的操作抽象为"),t("strong",[s._v("文件事件")]),s._v("，服务端与客户端的通信会产生文件事件。\nRedis 通过单线程，并通过 I/O 多路复用来处理来自客户端的多个连接请求，当产生连接后，将 Socket 放入队列，并通过"),t("strong",[s._v("事件分派器")]),s._v("来选择相应的处理程序。服务端通过监听这些事件，并完成相应的处理。\nRedis 基于"),t("strong",[s._v("反应器模型（Reactor Pattern）"),t("strong",[s._v("开发了网络事件处理器，并称之为文件事件处理器。文件事件处理器使用")]),s._v(" I/O 多路复用")]),s._v("来同时监听多个 Socket 套接字，并根据不同的套接字所执行的任务选择相应的事件处理器。被监听的套接字准备好执行连接应答（accept）、读取（read）、写入（write）、关闭（close）等操作，与操作相关的文件事件就会产生，这时文件事件处理器就会调用套接字之前关联好的事件处理器来处理这些事件。\nI/O 多路复用监听多个套接字，并向文件事件分派器分派产生事件的套接字。如果有多个文件事件，I/O 多路复用程序会将所有产生事件的套接字放到一个队列里，并通过有序、同步、一次一个套接字的方式向文件事件分派器传送套接字。当上一个套接字的事件被处理完毕后，I/O 多路复用才会向文件分派器传送下一个套接字。文件事件分派器接受到 I/O 多路复用程序分派的套接字后，根据套接字类型选择相应的事件处理器。服务器根据套接字类型的不同，关联不同的事件处理器，即发生某事件后，该执行哪些操作。\n"),t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/1af9b1882621a77b03b35d2c64a0bfa1.png",alt:"无标题1.png"}})]),s._v(" "),t("ol",[t("li",[s._v("客户端连接请求交由 I/O 多路复用程序进行处理；")]),s._v(" "),t("li",[s._v("将 Socket 操作抽象为文件事件，放入 Socket 队列；")]),s._v(" "),t("li",[s._v("文件事件分派器将 Socket 队列取出，交给对应的事件处理器进行处理。")])]),s._v(" "),t("p",[s._v("因为大 Key 的存在，所以在产生对应的 Socket 时，就会占用非常大的内存，影响网络 I/O 的效率，降低整个处理链路的效率。")]),s._v(" "),t("blockquote",[t("p",[s._v("参考文档："),t("a",{attrs:{href:"https://blog.csdn.net/Revivedsun/article/details/100006458",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/Revivedsun/article/details/100006458"),t("OutboundLink")],1)])]),s._v(" "),t("h3",{attrs:{id:"执行指令-bigkeys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#执行指令-bigkeys"}},[s._v("#")]),s._v(" 执行指令 bigkeys")]),s._v(" "),t("p",[s._v("在 redis 6.0 版本中，我们可以使用提供的"),t("code",[s._v("--bigkeys")]),s._v("参数得到各个数据类型占用空间最大的 Key。\n在 docker 中，我们可以执行指令：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("docker")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it redis redis-cli -p "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6379")]),s._v(" --bigkeys\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/52d86e94c40456b6b903184b9352252f.png",alt:"image.png"}}),s._v("\n如果说存在大 Key ，我们可以得到：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# redis-cli -p 6379 --bigkeys")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Scanning the entire keyspace to find biggest keys as well as")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# per 100 SCAN commands (not usually needed).")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("00.00%"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Biggest string found so far "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"ballcat:oauth:refresh_auth:f6cdb384-9a9d-4f2f-af01-dc3f28057c20\"'")]),s._v(" with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4437")]),s._v(" bytes\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("00.00%"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" Biggest list   found so far "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"my-list\"'")]),s._v(" with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" items\n\n-------- summary -------\n\nSampled "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" keys "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" the keyspace"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("\nTotal key length "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" bytes is "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("264")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("avg len "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("52.80")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nBiggest   list found "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"my-list\"'")]),s._v(" has "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" items\nBiggest string found "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'\"my-string\"'")]),s._v(" has "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4437")]),s._v(" bytes\n\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" lists with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),s._v(" items "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20.00")]),s._v("% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" hashs with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" fields "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00.00% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" strings with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4831")]),s._v(" bytes "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80.00")]),s._v("% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1207.75")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" streams with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" entries "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00.00% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" sets with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" members "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00.00% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" zsets with "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" members "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("00.00% of keys, avg size "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br")])]),t("p",[s._v("查看上述的打印结果，我们可以知道该命令只能得到每种数据类型的 Top 1 空间占用的 Key ，所以这个命令存在一定的局限性。而且，该命令会执行 Scan 扫描所有的 Key 空间去寻找最大的 Key ，会对 redis 的性能具有一定影响。")]),s._v(" "),t("h3",{attrs:{id:"debug指令"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#debug指令"}},[s._v("#")]),s._v(" debug指令")]),s._v(" "),t("p",[s._v("除了 --bigkey 参数之外，还有一个参数也可以执行 Key 的分析。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("DEBUG OBJECT "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("KeyName"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 示例")]),s._v("\nredis"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" DEBUG OBJECT my_pc\nValue at:0xb6838d20 refcount:1 encoding:raw serializedlength:9 lru:283790 lru_seconds_idle:150\n\nredis"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" DEBUG OBJECT your_mac\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" ERR no such key\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("Debug Object 命令是一个调试命令，它不应被客户端所使用。当 key 存在时，返回有关信息。 当 key 不存在时，返回一个错误。")]),s._v(" "),t("blockquote",[t("p",[s._v("其中 serializedlength 的值为该 Key 的序列化长度。但是 Key 的序列化长度并不等同于它在内存空间中的真实长度。此外 debug object 属于调试命令，运行代价较大，并且在其运行时，进入 Redis 的其余请求将会被阻塞直到其执行完毕，且每次只能查找单个 key 的信息，官方不推荐使用。")])]),s._v(" "),t("p",[s._v("该指令用于分析，主要有以下的特点：")]),s._v(" "),t("blockquote",[t("p",[s._v("① 分析与实际存在差异，内存和序列化结果不一致；\n② 运行指令代价比较大；\n③ 运行时阻塞。")])]),s._v(" "),t("blockquote",[t("p",[s._v("参考文档："),t("a",{attrs:{href:"http://redisdoc.com/debug/debug_object.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("http://redisdoc.com/debug/debug_object.html"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://blog.csdn.net/Weixiaohuai/article/details/125391957",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://blog.csdn.net/Weixiaohuai/article/details/125391957"),t("OutboundLink")],1)])]),s._v(" "),t("h3",{attrs:{id:"分析-rdb-文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分析-rdb-文件"}},[s._v("#")]),s._v(" 分析 RDB 文件")]),s._v(" "),t("p",[s._v("通过分析 RDB 文件来找出 big key。前提是 Redis 采用的是 RDB 持久化方式。\n网上有现成的代码/工具可以直接拿来使用：")]),s._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://github.com/sripathikrishnan/redis-rdb-tools",target:"_blank",rel:"noopener noreferrer"}},[s._v("redis-rdb-tools"),t("OutboundLink")],1),s._v(" ：Python 语言写的用来分析 Redis 的 RDB 快照文件用的工具。")]),s._v(" "),t("li",[t("a",{attrs:{href:"https://github.com/weiyanwei412/rdb_bigkeys",target:"_blank",rel:"noopener noreferrer"}},[s._v("rdb_bigkeys"),t("OutboundLink")],1),s._v(" : Go 语言写的用来分析 Redis 的 RDB 快照文件用的工具，性能更好。")])]),s._v(" "),t("p",[s._v("对于线上生产环境，如果需要分析一段时间内的大 Key ，同时采用的并不是 RDB 持久化方式，我们在条件允许的环境下，可以采取以下的步骤进行：")]),s._v(" "),t("ol",[t("li",[s._v("导出 AOF 文件，在备份机器上执行复原；")]),s._v(" "),t("li",[s._v("在机器上使用 save 指令获得 RDB 文件；")]),s._v(" "),t("li",[s._v("使用工具分析 RDB 文件。")])]),s._v(" "),t("p",[t("img",{attrs:{src:"https://img-blog.csdnimg.cn/img_convert/cf2aaa7d2076d83ba0e516503c872b2a.png",alt:"image.png"}}),s._v("\n事实上到这一步，只是解决了 BigKey 的排查问题。但是真正需要解决大 Key ，要依赖一些其他的手段。")]),s._v(" "),t("h3",{attrs:{id:"bigkey解决-减少内存占用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bigkey解决-减少内存占用"}},[s._v("#")]),s._v(" BigKey解决/减少内存占用")]),s._v(" "),t("p",[s._v("对于 BigKey ，无非就是减小 key 对应的 value 值的大小，也就是对于 String 数据结构的话，减少存储的字符串的长度；对于 List、Hash、Set、ZSet 数据结构则是减少集合中元素的个数。")]),s._v(" "),t("h4",{attrs:{id:"拆分集合类元素"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拆分集合类元素"}},[s._v("#")]),s._v(" 拆分集合类元素")]),s._v(" "),t("p",[s._v("如果针对集合类数据结构，例如 List、Hash、Set、ZSet 数据结构，我们需要减少其中元素的个数。以 List 为例，具体做法：")]),s._v(" "),t("ol",[t("li",[s._v("原 List 的 Key 非常大，我们拆分为 5 个小的 Key；")]),s._v(" "),t("li",[s._v("先计算 Key 的哈希值，利用 hash(原key)%5 得到目标的 Key 处于 5 个小 Key 中的哪一个 Key。")])]),s._v(" "),t("p",[s._v("这只是简单的拆分，基本思想遵循拆分元素个数解决。")]),s._v(" "),t("h4",{attrs:{id:"异步删除大key"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#异步删除大key"}},[s._v("#")]),s._v(" 异步删除大Key")]),s._v(" "),t("blockquote",[t("p",[s._v("参考文档："),t("a",{attrs:{href:"https://www.modb.pro/db/390777",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.modb.pro/db/390777"),t("OutboundLink")],1)])]),s._v(" "),t("p",[s._v("对于大 key ，我们可以执行删除操作。删除操作主要依赖于异步操作指令：")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("unlink "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("keyName"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("为什么不使用 del 指令而是使用 unlink 指令？")]),s._v(" "),t("ol",[t("li",[s._v("del 指令在删除 key 的时候会阻塞主线程；")]),s._v(" "),t("li",[s._v("unlink 指令属于异步操作，在执行的时候只会在主线程执行一些判断和其他操作，并不会造成长时间的主线程阻塞；")]),s._v(" "),t("li",[s._v("unlink 不建议用来删除比较小的 Key ，可能会出现在主线程执行判断和其他操作的成本远大于 del 指令的情况出现。")])]),s._v(" "),t("h4",{attrs:{id:"监控-redis-的内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#监控-redis-的内存"}},[s._v("#")]),s._v(" 监控 Redis 的内存")]),s._v(" "),t("p",[s._v("可以通过给 Redis 设置最大内存的方式，保持机器的 redis 内存占用维持在一个水平线以下。一旦即将超过最大内存限制，将会触发内存淘汰策略。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("config "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" maxmemory 1G\nconfig rewrite\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("此外，监控 Redis 还可以通过一些第三方软件来完成，比如 Application Manager 等。在现在流行的云服务厂商，也会提供有高级的配套监控服务。\n我们可以自己利用内存监控，设置合理的 Redis 内存报警阈值来提醒我们此时可能有大 Key 正在产生，如：Redis 的内存使用率、内存固定时间内增长率等。")]),s._v(" "),t("blockquote",[t("p",[s._v("参考文档："),t("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/476713841",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://zhuanlan.zhihu.com/p/476713841"),t("OutboundLink")],1),s._v(" "),t("a",{attrs:{href:"https://www.jianshu.com/p/4917f733a239",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.jianshu.com/p/4917f733a239"),t("OutboundLink")],1)])]),s._v(" "),t("h4",{attrs:{id:"定期清理失效数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定期清理失效数据"}},[s._v("#")]),s._v(" 定期清理失效数据")]),s._v(" "),t("p",[s._v("如果部分 Key 有业务不断以增量方式写入大量的数据，并且忽略了时效性，这样会导致大量的失效数据堆积。可以通过定时任务的方式，对失效数据进行清理。\n定时清理失效数据，也可以降低 redis 的内存使用。")]),s._v(" "),t("h4",{attrs:{id:"压缩-value-数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#压缩-value-数据"}},[s._v("#")]),s._v(" 压缩 Value 数据")]),s._v(" "),t("p",[s._v("使用序列化、压缩算法将 Key 的大小控制在合理范围内，但是需要注意，序列化、反序列化都会带来一定的消耗。如果压缩后，value 还是很大，那么可以进一步对 key 进行拆分。")]),s._v(" "),t("h4",{attrs:{id:"减少相同-key-存储"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#减少相同-key-存储"}},[s._v("#")]),s._v(" 减少相同 Key 存储")]),s._v(" "),t("p",[s._v("对于相同元素的 Key 值，我们可以将多个非常小的 Key 进行整合，使用适当的数据结构进行存储，可以减少相同的 Key 前缀的空间占用。")]),s._v(" "),t("div",{staticClass:"language-shell line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[s._v("user.name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" michael"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nuser.age"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v("\nuser.id"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1840800")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 可以使用 hash 进行改造")]),s._v("\nKey: user:1840800\nValue: user Object\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])])])}),[],!1,null,null,null);e.default=n.exports}}]);