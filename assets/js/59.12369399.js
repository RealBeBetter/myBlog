(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{654:function(t,a,s){"use strict";s.r(a);var v=s(11),e=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"四、类加载和字节码技术"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#四、类加载和字节码技术"}},[t._v("#")]),t._v(" 四、类加载和字节码技术")]),t._v(" "),s("h3",{attrs:{id:"类文件结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类文件结构"}},[t._v("#")]),t._v(" 类文件结构")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/Ke2vsYlQzSH8Xn4.png",alt:"image-20210325183540435"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/Ww2isvOezuQ9TVH.png",alt:"image-20210325183717293"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/pwx4VgiZhK5lFma.png",alt:"image-20210325183808759"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/msvDeakyEuL9X4i.png",alt:"image-20210325183903397"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/QwGRCF3qI2ZiYJE.png",alt:"image-20210325184037793"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/KIMXeBtgPkhCmTn.png",alt:"image-20210325184845340"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/xkdfP81TQNWhapG.png",alt:"image-20210325184450360"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/7pNvZfQBG85Okdh.png",alt:"image-20210325185025493"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/W2rut1ofk3UAYcs.png",alt:"image-20210325185204157"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/lcbCMOexSqARsv1.png",alt:"image-20210325185341790"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/BLhqa8Ktxo4jpNM.png",alt:"image-20210325185556662"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/vFeVHNYIJSLZycf.png",alt:"image-20210325185610484"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/08/nCY19jrvUd3iPBA.png",alt:"image-20210325185910414"}})]),t._v(" "),s("h3",{attrs:{id:"字节码指令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字节码指令"}},[t._v("#")]),t._v(" 字节码指令")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/M4LWHbcduxyrXfN.png",alt:"image-20210325190112864"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/po8muJNflHPMRGz.png",alt:"image-20210325195243335"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/yYePSEGsHcxK4OC.png",alt:"image-20210325195753963"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/PqTWk64BSucnCvz.png",alt:"image-20210325195829138"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/7P6S9ImgoMnZY4u.png",alt:"image-20210325195911657"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/4DacRCktuAWPmUI.png",alt:"image-20210325200028260"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/HKx1UBePhGvsay9.png",alt:"image-20210325200048656"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/UfuTgLGPZkJY9nc.png",alt:"image-20210325200203428"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/6SRHExOVjyI1JYQ.png",alt:"image-20210325200401619"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/3TaCoHwkOVQXrjs.png",alt:"image-20210325200503749"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/TrJUAnRkSfN6HcQ.png",alt:"image-20210325200551086"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/BWLy7xrOcYVXuqD.png",alt:"image-20210325201134614"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/xU8KPR5yVmWE4GS.png",alt:"image-20210325202722167"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/VmrlQwBiT1hexXM.png",alt:"image-20210325202753274"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/zfpc3A895WVqTY4.png",alt:"image-20210325203118692"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/7cRnNCSObvY9h3M.png",alt:"image-20210325203345916"}})]),t._v(" "),s("p",[s("strong",[t._v("多态的原理")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/mnH6PWseDftCOMz.png",alt:"image-20210325203819554"}})]),t._v(" "),s("p",[t._v("用HSDB工具，利用进程ID获取进程相关信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/z6E1C5MRSkJNFPt.png",alt:"image-20210325204120985"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/gUhPAkBsLdZveGD.png",alt:"image-20210325204656800"}})]),t._v(" "),s("h3",{attrs:{id:"编译期处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译期处理"}},[t._v("#")]),t._v(" 编译期处理")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/Gwr7B9lPitjqhsv.png",alt:"image-20210327145450462"}})]),t._v(" "),s("h4",{attrs:{id:"默认构造器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#默认构造器"}},[t._v("#")]),t._v(" "),s("strong",[t._v("默认构造器")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/YlpWxSahg6jm4Zb.png",alt:"image-20210327145652021"}})]),t._v(" "),s("h4",{attrs:{id:"自动拆装箱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自动拆装箱"}},[t._v("#")]),t._v(" 自动拆装箱")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/sHapIrDz6eli4Zq.png",alt:"image-20210327145813371"}})]),t._v(" "),s("h4",{attrs:{id:"泛型集合取值"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型集合取值"}},[t._v("#")]),t._v(" 泛型集合取值")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/QFhp5Ne79Bv2dom.png",alt:"image-20210327150134769"}})]),t._v(" "),s("p",[t._v("在字节码文件中，在第十四行中，调用接口，这一步做到了擦除泛型的操作。将泛型统一使用"),s("code",[t._v("Object")]),t._v("对象来操作，最后在27行的时候用"),s("code",[t._v("checkcast")]),t._v("执行了类型转换，转换回"),s("code",[t._v("Integer")]),t._v("。")]),t._v(" "),s("p",[t._v("擦除的是字节码上的泛型信息，可以看到"),s("code",[t._v("LocalVariableTypeTable")]),t._v("（局部变量类型表）仍然保留了方法参数泛型的信息。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/ZHBELDuIgFwYROQ.png",alt:"image-20210327150650307"}})]),t._v(" "),s("h4",{attrs:{id:"泛型反射"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#泛型反射"}},[t._v("#")]),t._v(" 泛型反射")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/61wHaYOMgVdLZu9.png",alt:"image-20210327151340316"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/w82OEbVvakdlzpQ.png",alt:"image-20210327151507379"}})]),t._v(" "),s("h4",{attrs:{id:"foreach循环"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#foreach循环"}},[t._v("#")]),t._v(" foreach循环")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/Vc1UpGZOfASF6M2.png",alt:"image-20210327152843131"}})]),t._v(" "),s("h4",{attrs:{id:"switch字符串"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch字符串"}},[t._v("#")]),t._v(" Switch字符串")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/CotchXTlauWkvgQ.png",alt:"image-20210327154245038"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/ylNkDTx4MGHuaLr.png",alt:"image-20210327154325673"}})]),t._v(" "),s("p",[t._v("如果hashcode相等，将会进一步利用equals方法进行比较。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/nQUOWJlKtMH3uYD.png",alt:"image-20210327162718663"}})]),t._v(" "),s("h4",{attrs:{id:"switch枚举类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#switch枚举类"}},[t._v("#")]),t._v(" Switch枚举类")]),t._v(" "),s("p",[t._v("Switch枚举类在转换成字节码之后，会生成一个静态合成类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/TeKQkpUF7aLArIg.png",alt:"image-20210328160739476"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/qmbinSyogE2zreB.png",alt:"image-20210328161023156"}})]),t._v(" "),s("p",[t._v("在这样的结构中，实际上是根据合成类的数组下标的值找到对应的case项。")]),t._v(" "),s("h4",{attrs:{id:"枚举类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#枚举类"}},[t._v("#")]),t._v(" 枚举类")]),t._v(" "),s("p",[t._v("枚举类的字节码生成，与上述的Switch枚举类类似，会生成静态类。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/YK7O4Hi8hw2SknR.png",alt:"image-20210328161312617"}})]),t._v(" "),s("h4",{attrs:{id:"try-with-resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#try-with-resources"}},[t._v("#")]),t._v(" Try-with-resources")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/8zyxG4KdBP1Ycrb.png",alt:"image-20210328161631524"}})]),t._v(" "),s("p",[t._v("上述的代码在经过字节码转换后，会被转换为：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/knTIhV49u3PGbim.png",alt:"image-20210328161835711"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/b7pq3tnNxBSzY81.png",alt:"image-20210328161927559"}})]),t._v(" "),s("h4",{attrs:{id:"方法重写时的桥接方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法重写时的桥接方法"}},[t._v("#")]),t._v(" 方法重写时的桥接方法")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/S2VoIniPFUt8vwT.png",alt:"image-20210328162525503"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/HROFx5NA4CYsQkc.png",alt:"image-20210328162756624"}})]),t._v(" "),s("h4",{attrs:{id:"匿名内部类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类"}},[t._v("#")]),t._v(" 匿名内部类")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/HP2Uk4OAuhZsoM6.png",alt:"image-20210328162914226"}})]),t._v(" "),s("h3",{attrs:{id:"类加载阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载阶段"}},[t._v("#")]),t._v(" 类加载阶段")]),t._v(" "),s("h4",{attrs:{id:"加载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#加载"}},[t._v("#")]),t._v(" 加载")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/6NfkMs48hKijuDq.png",alt:"image-20210328163303867"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/fiBpEONY7tb2Ro9.png",alt:"image-20210328163754384"}})]),t._v(" "),s("h4",{attrs:{id:"链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#链接"}},[t._v("#")]),t._v(" 链接")]),t._v(" "),s("p",[t._v("链接阶段分为三个步骤："),s("strong",[t._v("验证、准备、解析")])]),t._v(" "),s("p",[t._v("验证阶段：验证类是否符合JVM规范，安全性检查")]),t._v(" "),s("p",[t._v("准备阶段："),s("strong",[t._v("当static变量是final的基本类型或者String字符串常量，则赋值操作就在准备阶段完成")])]),t._v(" "),s("p",[t._v("解析阶段：将常量池中的符号解析为直接引用")]),t._v(" "),s("ul",[s("li",[t._v("验证：验证类是否符合JVM规范，安全性检查\n用UE等支持二进制的编辑器修改HelloWorld.class的魔数，在控制台运行")]),t._v(" "),s("li",[t._v("准备：为static量分配空间，设置默认值\n"),s("ul",[s("li",[t._v("static 变量在JDK 7之前存储于instanceKlass末尾，从JDK 7开始，存储于"),s("code",[t._v("_ java_ mirror")]),t._v("末尾")]),t._v(" "),s("li",[t._v("static 变量分配空间和赋值是两个步骤，分配空间在准备阶段完成，赋值在初始化阶段完成")]),t._v(" "),s("li",[t._v("如果static变量是final的基本类型，那么编译阶段值就确定了，赋值在准备阶段完成")]),t._v(" "),s("li",[t._v("如果static变量是final的，但属于引用类型，那么赋值也会在初始化阶段完成")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/9CzmIfxo4ZYADka.png",alt:"image-20210328165519199"}})]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("C")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" d "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("h4",{attrs:{id:"初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始化"}},[t._v("#")]),t._v(" 初始化")]),t._v(" "),s("p",[s("code",[t._v("<cinit>()V")]),t._v("方法\n初始化即调用"),s("code",[t._v("<cinit>()V")]),t._v("，虚拟机会保证这个类的【构造方法】的线程安全。")]),t._v(" "),s("p",[s("strong",[t._v("发生的时机")])]),t._v(" "),s("p",[t._v("概括得说，类初始化是【懒惰的】")]),t._v(" "),s("ul",[s("li",[t._v("main 方法所在的类，总会被首先初始化")]),t._v(" "),s("li",[t._v("首次访问这个类的静态变量或静态方法时")]),t._v(" "),s("li",[t._v("子类初始化，如果父类还没初始化，会引发")]),t._v(" "),s("li",[t._v("子类访问父类的静态变量，只会触发父类的初始化")]),t._v(" "),s("li",[t._v("Class.forName")]),t._v(" "),s("li",[t._v("new会导致初始化")])]),t._v(" "),s("p",[t._v("不会导致类初始化的情况")]),t._v(" "),s("ul",[s("li",[t._v("访问类的static final静态常量(基本类型和字符串)不会触发初始化")]),t._v(" "),s("li",[t._v("类对象.class 不会触发初始化")]),t._v(" "),s("li",[t._v("创建该类的数组不会触发初始化")]),t._v(" "),s("li",[t._v("类加载器的loadClass方法")]),t._v(" "),s("li",[t._v("Class.forName的参数2为false时")])]),t._v(" "),s("h3",{attrs:{id:"类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类加载器"}},[t._v("#")]),t._v(" 类加载器")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/c8D34AZpe16xyFT.png",alt:"image-20210328171548823"}})]),t._v(" "),s("h4",{attrs:{id:"启动类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启动类加载器"}},[t._v("#")]),t._v(" 启动类加载器")]),t._v(" "),s("p",[t._v("用getClassLoader方法得到类加载器，并且根据参数指定类交由特定的类加载器。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/2esqYWJ5ryA74MX.png",alt:"image-20210328172025443"}})]),t._v(" "),s("p",[t._v("上述代码的执行结果：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/sLxOQit1JIXFUk7.png",alt:"image-20210328172230982"}})]),t._v(" "),s("ul",[s("li",[t._v("可以用这个办法替换核心类\n"),s("ul",[s("li",[s("code",[t._v("java - Xbootclasspath: <new bootclasspath>")])]),t._v(" "),s("li",[s("code",[t._v("java -Xbootclasspath/a:<追加路径>")])]),t._v(" "),s("li",[s("code",[t._v("java -Xbootclasspath/p: <追加路径>")])])])])]),t._v(" "),s("p",[t._v("因为启动类加载器使用的是C++编写的，所以打印结果是"),s("code",[t._v("null")]),t._v("；如果是应用程序类加载器和扩展类加载器，则分别打印"),s("code",[t._v("AppClassLoader")]),t._v("、"),s("code",[t._v("ExtClassLoader")]),t._v("。")]),t._v(" "),s("h4",{attrs:{id:"扩展类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扩展类加载器"}},[t._v("#")]),t._v(" 扩展类加载器")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/S5ezO23lfWnouEM.png",alt:"image-20210328173006999"}})]),t._v(" "),s("h4",{attrs:{id:"应用程序类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用程序类加载器"}},[t._v("#")]),t._v(" 应用程序类加载器")]),t._v(" "),s("h4",{attrs:{id:"双亲委派模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲委派模式"}},[t._v("#")]),t._v(" 双亲委派模式")]),t._v(" "),s("p",[t._v("所谓的双亲委派，就是指调用类加载器的"),s("code",[t._v("loadClass()")]),t._v("方法时，查找类的规则。")]),t._v(" "),s("blockquote",[s("p",[t._v("这里的双亲，翻译为上级更合适，因为它们并没有继承关系")])]),t._v(" "),s("h4",{attrs:{id:"线程上下文类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程上下文类加载器"}},[t._v("#")]),t._v(" 线程上下文类加载器")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/1G7oPrniyJ25mq3.png",alt:"image-20210328173505576"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/hVjQZAaH26ObEXI.png",alt:"image-20210328173625781"}})]),t._v(" "),s("p",[t._v("在JDk源码中，使用的是"),s("code",[t._v("ClassLoader.getSystemClassLoader()")]),t._v("方法来加载"),s("code",[t._v("DriverManager")]),t._v("类的。这一加载器其实就是"),s("code",[t._v("ApplicationClassLoader")]),t._v("加载器。所以真正开始使用的不是启动类加载器bootstrap，反而是应用程序类加载器，打破了原有的双亲委派模式。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/BcRQoewanUC341t.png",alt:"image-20210328180527279"}})]),t._v(" "),s("h4",{attrs:{id:"重点部分-破坏双亲委派机制的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重点部分-破坏双亲委派机制的实现"}},[t._v("#")]),t._v(" 重点部分—破坏双亲委派机制的实现")]),t._v(" "),s("p",[t._v("使用线程上下文类加载器(Thread Context ClassLoader)。这个类加载器可以通过java.lang.Thread类的"),s("code",[t._v("setContextClassLoader()")]),t._v("方法进行设置，如果创建线程时还未设置，他将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。")]),t._v(" "),s("p",[t._v("有了线程上下文加载器，JNDI服务【Java Naming and Directory Interface（JAVA命名和目录接口）】就可以使用它去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是"),s("strong",[t._v("打通了双亲委派模型层次结构来逆向使用类加载器")]),t._v("，实际上已经违背了双亲委派模型的一般性原则，但这也是无可奈何的事情。Java中所有涉及SPI的加载动作基本上都采用这种方式，例如JNDI、JDBC、JCE、JAXB和JBI等。")]),t._v(" "),s("p",[t._v("部分源代码如下所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/2DJl3Z5AzqGR8Pg.png",alt:"image-20210328174052239"}})]),t._v(" "),s("hr"),t._v(" "),s("p",[s("strong",[t._v("SPI（Service Provider Interface）的使用")]),t._v("在一些项目中，在jar包下会有一个META-INF的文件夹，里面有一个services的子文件夹，内部存放着一些类的全限定名文件，文件内容是实现类名称。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/nSzuU3TIqFOa2Mp.png",alt:"image-20210328174506881"}})]),t._v(" "),s("p",[t._v("以这样的方式得到实现类，体现的是【"),s("strong",[t._v("面向接口编程+解耦")]),t._v("】的编程思想，在一些框架中都使用了这一思想：JDBC、Servlet初始化器、Spring容器、Dubbo（对SPI进行了扩展）。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/PC8ihyqGDJIjtKv.png",alt:"image-20210328174910607"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/piMQjEBnzVwtrGe.png",alt:"image-20210328175007174"}})]),t._v(" "),s("h4",{attrs:{id:"自定义类加载器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义类加载器"}},[t._v("#")]),t._v(" 自定义类加载器")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/ZpQg8aTx2Pu6ncO.png",alt:"image-20210328180734181"}})]),t._v(" "),s("p",[t._v("步骤：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("继承 ClassLoader 父类")])]),t._v(" "),s("li",[s("p",[t._v("要遵从双亲委派机制，重写 findClass 方法")]),t._v(" "),s("p",[t._v("注意不是重写 loadClass 方法，否则不会走双亲委派机制")])]),t._v(" "),s("li",[s("p",[t._v("读取类文件的字节码")])]),t._v(" "),s("li",[s("p",[t._v("调用父类的 defineClass 方法来加载类")])]),t._v(" "),s("li",[s("p",[t._v("使用者调用该类加载器的 loadClass 方法")])])]),t._v(" "),s("h3",{attrs:{id:"运行期优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行期优化"}},[t._v("#")]),t._v(" 运行期优化")]),t._v(" "),s("p",[t._v("运行期间，JVM虚拟机会对代码做一定的优化。")]),t._v(" "),s("p",[s("strong",[t._v("编译器")])]),t._v(" "),s("p",[t._v("编译器是一种计算机程序，负责把一种编程语言编写的源码转换成另外一种计算机代码，后者往往是以二进制的形式被称为目标代码(object code)。这个转换的过程通常的目的是生成可执行的程序。")]),t._v(" "),s("p",[t._v("编译器的产出是「另外一种代码」，然后这些代码等着被别人拿来执行，如果还不能直接被执行，那么还需要再编译或解释一遍，再交由计算机硬件执行。")]),t._v(" "),s("p",[t._v("编译器，往往是在「执行」之前完成，产出是一种可执行或需要再编译或者解释的「代码」。")]),t._v(" "),s("p",[s("strong",[t._v("解释器")])]),t._v(" "),s("p",[t._v("解释器是一种计算机程序，它直接执行由编程语言或脚本语言编写的代码，并不会把源代码预编译成机器码。一个解释器，通常会用以下的策略来执行程序代码：")]),t._v(" "),s("p",[t._v("分析源代码，并且直接执行。\n把源代码翻译成相对更加高效率的中间码，然后立即执行它。\n执行由解释器内部的编译器预编译后保存的代码。")]),t._v(" "),s("p",[s("strong",[t._v("两者的异同")])]),t._v(" "),s("blockquote",[s("p",[t._v("相同点：都是一种计算机程序")]),t._v(" "),s("p",[t._v("不同点：①编译器将源码转换成另一种计算机代码，解释器执行代码；②编译器不执行程序代码，解释器执行程序代码")])]),t._v(" "),s("h4",{attrs:{id:"即时编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#即时编译"}},[t._v("#")]),t._v(" 即时编译")]),t._v(" "),s("blockquote",[s("p",[t._v("JIT"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E7%BC%96%E8%AF%91%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("编译器"),s("OutboundLink")],1),t._v("，英文写作Just-In-Time Compiler，中文意思是"),s("a",{attrs:{href:"https://baike.baidu.com/item/%E5%8D%B3%E6%97%B6%E7%BC%96%E8%AF%91%E5%99%A8/18428531",target:"_blank",rel:"noopener noreferrer"}},[t._v("即时编译器"),s("OutboundLink")],1),t._v("。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/barhlU9Wox6Ms5I.png",alt:"image-20210328185703536"}})]),t._v(" "),s("h5",{attrs:{id:"分层编译"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分层编译"}},[t._v("#")]),t._v(" 分层编译")]),t._v(" "),s("blockquote",[s("p",[t._v("对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。执行效率上简单比较一下 "),s("code",[t._v("Interpreter < C1 < C2")]),t._v(" ，总的目标是发现热点代码（ hotspot 名称的由来），并优化之。")])]),t._v(" "),s("p",[s("strong",[t._v("逃逸分析")])]),t._v(" "),s("p",[t._v("逃逸分析的基本行为就是分析对象动态作用域：当一个对象在方法中被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他地方中，称为方法逃逸。")]),t._v(" "),s("blockquote",[s("p",[t._v("JVM判断新创建的对象是否逃逸的依据有：")]),t._v(" "),s("p",[s("strong",[t._v("一、对象被赋值给堆中对象的字段和类的静态变量。")])]),t._v(" "),s("p",[s("strong",[t._v("二、对象被传进了不确定的代码中去运行。")])])]),t._v(" "),s("p",[t._v("对于逃逸分析，目的就是发现新建的对象是否“逃逸”。在下面的代码中，后续的执行阶段中已经完成了逃逸分析，循环后期的运行速度大幅提升。高亮部分就是关闭逃逸分析。逃逸分析完成之后，代码的执行速度会大大加快，执行效率也会提升。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/RaXcBPjpMDA1KnE.png",alt:"image-20210328192828901"}})]),t._v(" "),s("h5",{attrs:{id:"方法内联"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法内联"}},[t._v("#")]),t._v(" 方法内联")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/Y9yaJ3XnVGPOZ6W.png",alt:"image-20210328210100942"}})]),t._v(" "),s("p",[t._v("实验案例中的代码：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/1SqvWG2mspOgVxb.png",alt:"image-20210328210344021"}})]),t._v(" "),s("h5",{attrs:{id:"字段优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字段优化"}},[t._v("#")]),t._v(" 字段优化")]),t._v(" "),s("p",[t._v("针对（静态）变量读写进行优化")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/JaqrtXO6FRN3sZb.png",alt:"image-20210328210712720"}})]),t._v(" "),s("p",[t._v("方法是否内联会影响到成员变量读取的优化。")]),t._v(" "),s("p",[t._v("在测试代码（如下）中，这种优化相当于首次读取就已经完成了求长度以及取下标的操作，省去了1999次Field读取操作。")]),t._v(" "),s("p",[t._v("但是如果刚才的代码没有进行方法内联（被禁用），则不会进行上述的首次读取缓存操作，最终会导致效率下降。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/vnHK2aFsELzx18W.png",alt:"image-20210328211524295"}})]),t._v(" "),s("h4",{attrs:{id:"反射优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射优化"}},[t._v("#")]),t._v(" 反射优化")]),t._v(" "),s("p",[s("strong",[t._v("定义")])]),t._v(" "),s("blockquote",[s("p",[t._v("反射机制是在运行状态中，对于任意的一个类，都能够知道这个类的所有属性和方法，对任意一个对象都能够通过反射机制调用一个类的任意方法，这种动态获取类信息及动态调用类对象方法的功能称为java的反射机制。")])]),t._v(" "),s("p",[s("strong",[t._v("作用")])]),t._v(" "),s("blockquote",[s("p",[t._v("①动态地创建类的实例，将类绑定到现有的对象中，或从现有的对象中获取类型。")]),t._v(" "),s("p",[t._v("②应用程序需要在运行时从某个特定的程序集中载入一个特定的类。")])]),t._v(" "),s("p",[s("strong",[t._v("优化")])]),t._v(" "),s("p",[t._v("反射的方法调用，在第1-15次调用中是非常快的，也就是前十五次的反射调用是非常快的，但是在第十六次及以后，对于反射的调用就变得很慢了。原因是在反射相关的源码中，有一个名为膨胀阈值的参数，缺省值为15。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReflectionFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("inflationThreshold")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" inflationThreshold "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("p",[t._v("注意：通过查看 "),s("code",[t._v("ReflectionFactory")]),t._v(" 源码可知：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("sun.reflect.noInflation")]),t._v(" 可以用来禁用膨胀（直接生成 "),s("code",[t._v("GeneratedMethodAccessorl")]),t._v(" ，但首次生成比较耗时，如果仅反射调用一次，不划算）")]),t._v(" "),s("li",[s("code",[t._v("sun.reflect.inflationThreshold")]),t._v(" 可以修改膨胀阈值")])]),t._v(" "),s("p",[t._v("要想直接使用生成的"),s("code",[t._v("MethodAccessor")]),t._v("，而非使用本地的"),s("code",[t._v("MethodAccessor")]),t._v("，可以使用"),s("code",[t._v("RefletionFactory.noInflation = true;")]),t._v("来禁用膨胀。")]),t._v(" "),s("h2",{attrs:{id:"五、内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#五、内存模型"}},[t._v("#")]),t._v(" 五、内存模型")]),t._v(" "),s("h3",{attrs:{id:"java内存模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java内存模型"}},[t._v("#")]),t._v(" Java内存模型")]),t._v(" "),s("p",[t._v("Java内存模型是指"),s("strong",[t._v("Java Memory Model（JMM）")]),t._v("，内存模型与之前的内存结构不是同一个概念。")]),t._v(" "),s("p",[t._v("JMM定义了一套在多线程读写共享数据（成员变量、数组）时，对数据的"),s("strong",[t._v("原子性、可见性、有序性")]),t._v("的规则和保障。")]),t._v(" "),s("h4",{attrs:{id:"原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[t._v("#")]),t._v(" 原子性")]),t._v(" "),s("p",[t._v("在Java中，由两个线程，对一个静态变量0分别进行5000次的自增和自减，最终输出的结果会是0吗？答案是不一定，多次运行的结果并不相同，可能是正数，也可能是负数，也可能是0。原因是因为："),s("strong",[t._v("Java中对静态变量的自增自减操作并不是原子操作")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/9zApR1bfsrunxXq.png",alt:"image-20210328215405647"}})]),t._v(" "),s("p",[t._v("Java中对于静态变量的自增自减会在主内存和线程内存中进行数据交换。也就是说，对于共享的变量，比如静态变量，进行线程操作的话，会在主内存和线程内存中进行数据交换。共享变量储存在主内存中，这里的主内存区别于计算机组成原理中的主存。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/2NtL7jGiyZhAknd.png",alt:"image-20210328215637790"}})]),t._v(" "),s("p",[t._v("之前的案例中，出现负数的情况，有可能如下所示：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/hZIOmGKyufi6TJq.png",alt:"image-20210328220156581"}})]),t._v(" "),s("p",[t._v("正数的情况就是将线程1、2的执行顺序调换了，这种情况就属于更新数据丢失，最终打印的值并不能体现实际的变换过程。因为在实际的运行过程中，线程是会交错运行的，这就是导致刚才的案例结果不确定的原因。")]),t._v(" "),s("p",[t._v("要避免这样的更新丢失情况出现，解决办法就是使用同步"),s("code",[t._v("synchronized()")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("synchronized")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 要进行原子操作的代码")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("同步的大体概念是使用monitor监视需要同步的线程的运行情况，Owner中的线程与EntryList中的线程、WaitSet中的线程，当同步中的线程正在运行的时候，就会让其他想要访问或者使用同步代码块中的变量的线程阻塞或者等待，从而达到原子性的效果。")]),t._v(" "),s("p",[t._v("如何理解：你可以把obj想象成一个房间，线程t1，t2想象成两个人。\n当线程t1执行到synchronized(obj)时就好比t1进入了这个房间，并反手锁住了门，在门内执行count++代码。\n这时候如果t2也运行到了synchronized(obj) 时，它发现门被锁住了，只能在门外等待。\n当t1执行完synchronized{}块内的代码，这时候才会解开门上的锁，从obj房间出来。t2 线程这时才可以进入obj房间，反锁住门，执行它的count--代码。\n注意：上例中t1和t2线程必须用synchronized锁住同一个obj对象，如果t1锁住的是m1对象，t2 锁住的是m2对象，就好比两个人分别进入了两个不同的房间，没法起到同步的效果。")]),t._v(" "),s("h4",{attrs:{id:"可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[t._v("#")]),t._v(" 可见性")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/OzX9Ycl54Eh2pkL.png",alt:"image-20210328222112248"}})]),t._v(" "),s("p",[t._v("在这个案例中，循环并不会像预期中的那样停下来，会陷入一个死循环中。")]),t._v(" "),s("p",[t._v("但是：在该代码中，将"),s("code",[t._v("while()")]),t._v("语句块中添加"),s("code",[t._v("System.out.println()")]),t._v("语句，程序也能自己停下来。这是因为："),s("code",[t._v("println()")]),t._v("方法中使用了"),s("code",[t._v("synchronized()")]),t._v("方法，会强制将t线程读取的JIT编译器的优化产生的高速缓存区转换为主内存，获取到run变量的更新，最终导致程序自主停止。")]),t._v(" "),s("p",[t._v("在涉及到"),s("code",[t._v("synchronized()")]),t._v("语句时，特定情况下，既可以保证原子性，也能够保证可见性。")]),t._v(" "),s("p",[t._v("下图表明了为何会出现程序的可见性问题（JIT编译器优化后的高速缓存）：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/gtCBWRDhGxMQzbA.png",alt:"image-20210328222230816"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/4eHja2RYuVrIvSk.png",alt:"image-20210328222315146"}})]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/JLsKy4dMcnj18qV.png",alt:"image-20210328222356016"}})]),t._v(" "),s("p",[t._v("由于主线程和t线程读取的变量并不是在同一个区域，从而导致主线程修改的变量值没有传到t线程，这就是可见性的问题。这样导致了主线程的修改失败，从而使得刚才的程序一直陷入死循环。")]),t._v(" "),s("p",[s("strong",[t._v("解决办法")])]),t._v(" "),s("p",[t._v("引入关键字"),s("code",[t._v("volatile")]),t._v("（易变），前面讲到的synchronized是一种阻塞式同步，在线程竞争激烈的情况下会升级为"),s("strong",[t._v("重量级锁")]),t._v("，性能相对更低，而volatile则是java虚拟机提供的最轻量级的同步机制。")]),t._v(" "),s("p",[t._v("volatile可以用来修饰成员变量和静态成员变量，它可以避免线程从自己的工作缓存中查找变量的值，必须到主存中获取它的值，线程操作volatile变量都是直接操作主存。")]),t._v(" "),s("blockquote",[s("p",[t._v("volatile\tadj.易变的; 无定性的; 无常性的; 可能急剧波动的; 不稳定的; 易恶化的; 易挥发的; 易发散的;")])]),t._v(" "),s("p",[t._v("解决可见性的痛点在于：数据的更新不能即使更新到每一个线程中，导致数据被”脏读“。而volatile的出现正是为了解决这种现象的出现。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("被volatile修饰的变量能够保证每个线程能够获取该变量的最新值，从而避免出现数据脏读的现象。")])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/eQXZDyswzhLn1OF.png",alt:"image-20210328224510544"}})]),t._v(" "),s("p",[t._v("它保证的是在多个线程之间，一个线程对volatile变量的修改对另一个线程可见，"),s("strong",[t._v("保证的是可见性")]),t._v("，"),s("strong",[t._v("不能保证原子性")]),t._v("。仅用在一个写线程，多个读线程的情况。")]),t._v(" "),s("h4",{attrs:{id:"有序性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[t._v("#")]),t._v(" 有序性")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/LAX8p697lu2gqCb.png",alt:"image-20210328224358153"}})]),t._v(" "),s("p",[t._v("上面这段代码被执行后，可能有几种情况？")]),t._v(" "),s("ul",[s("li",[t._v("情况1：线程1先执行，这时 "),s("code",[t._v("ready = false")]),t._v(" ，所以进入 else 分支结果为 1")]),t._v(" "),s("li",[t._v("情况2：线程2先执行 "),s("code",[t._v("num = 2")]),t._v(" ，但没来得及执行 "),s("code",[t._v("ready = true")]),t._v(" ，线程 1 执行，还是进入 else 分支，结果为 1")]),t._v(" "),s("li",[t._v("情况3：线程2执行到 "),s("code",[t._v("ready = true")]),t._v(" ，线程 1 执行，这回进入 if 分支，结果为 4 （因为 num 已经执行过了）")])]),t._v(" "),s("p",[t._v("除了这三种情况，还有可能结果为0。因为在线程2执行"),s("code",[t._v("ready = true")]),t._v("，切换到线程1，进入if分支，相加为0，再切回线程执行"),s("code",[t._v("num = 2")]),t._v("。")]),t._v(" "),s("p",[t._v("这种现象叫做"),s("strong",[t._v("指令重排")]),t._v("，是JIT编译器在运行时做的一些优化。")]),t._v(" "),s("p",[t._v("解决方法就是使用volatile修饰变量，可以禁用指令重排。")]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("同一个线程内，JVM会在不影响正确性的前提下调整语句的执行顺序。")])])]),t._v(" "),s("p",[t._v("这种特性我们称之为【指令重排】，多线程下的指令重排会影响正确性，例如double-check locking模式实现单例。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/8hxKIvDYGkb4jwT.png",alt:"image-20210329122955677"}})]),t._v(" "),s("p",[t._v("以上的实现特点是：")]),t._v(" "),s("ul",[s("li",[t._v("懒惰实例化")]),t._v(" "),s("li",[t._v("首次使用 "),s("code",[t._v("getInstance()")]),t._v(" 才使用 "),s("code",[t._v("synchronized")]),t._v(" 加锁，后续使用时无需加锁")])]),t._v(" "),s("p",[s("strong",[t._v("happens-before")])]),t._v(" "),s("p",[t._v("happens-before规定了哪些写操作对其他的读操作可见，它是可见性和有序性的一套规则总结。")]),t._v(" "),s("blockquote",[s("p",[t._v("t.join()方法只会使主线程（或者说调用t.join()的线程）进入等待池并等待t线程执行完毕后才会被唤醒。并不影响同一时刻处在运行状态的其他线程。")])]),t._v(" "),s("h4",{attrs:{id:"cas和原子类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cas和原子类"}},[t._v("#")]),t._v(" CAS和原子类")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/agpPIHcf1NrSRV3.png",alt:"image-20210329124327644"}})]),t._v(" "),s("p",[s("strong",[t._v("乐观锁和悲观锁")])]),t._v(" "),s("ul",[s("li",[t._v("CAS是基于乐观锁的思想：最乐观的估计，不怕别的线程来修改共享变量，就算改了也没关系，我吃亏点再重试。")]),t._v(" "),s("li",[t._v("synchronized是基于悲观锁的思想：最悲观的估计，得防着其它线程来修改共享变量，我上了锁你们都别想改，我改完了解开锁，你们才有机会。")])]),t._v(" "),s("p",[s("strong",[t._v("原子操作类")])]),t._v(" "),s("p",[s("code",[t._v("juc (java.utilconcurrent)")]),t._v(" 中提供了原子操作类，可以提供线程安全的操作，例如："),s("code",[t._v("AtomicInteger")]),t._v("、"),s("code",[t._v("AtomicBoolean")]),t._v(" 等，它们底层就是采用 CAS 技术 + volatile 来实现的。")]),t._v(" "),s("h3",{attrs:{id:"synchronized优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized优化"}},[t._v("#")]),t._v(" synchronized优化")]),t._v(" "),s("p",[t._v("Java HotSpot虚拟机中，每个对象都有对象头（包括class指针和Mark Word）。Mark Word平时存储这个对象的哈希码、分代年龄，当加锁时，这些信息就根据情况被替换为标记位、线程锁记录指针、重量级锁指针、线程ID等内容。")]),t._v(" "),s("h4",{attrs:{id:"轻量级锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#轻量级锁"}},[t._v("#")]),t._v(" 轻量级锁")]),t._v(" "),s("p",[t._v("如果一个对象虽然有多线程访问，但多线程访问的时间是错开的(也就是没有竞争)，那么可以使用轻量级锁来优化。这就好比学生(线程A)用课本占座，上了半节课，出门了（CPU时间到），回来一看, 发现课本没变，说明没有竞争，继续上他的课。\n如果这期间有其它学生(线程B) 来了，会告知(线程A)有并发访问，线程A随即升级为重量级锁，进入重量级锁的流程。\n而重量级锁就不是那么用课本占座那么简单了，可以想象线程A之前，把座位用一个铁栅栏围起来。")]),t._v(" "),s("h4",{attrs:{id:"锁膨胀"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁膨胀"}},[t._v("#")]),t._v(" 锁膨胀")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/ZOJysmkK6wFbnzh.png",alt:"image-20210329140454426"}})]),t._v(" "),s("h4",{attrs:{id:"重量锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重量锁"}},[t._v("#")]),t._v(" 重量锁")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/IrOvE3ypK5kTjzQ.png",alt:"image-20210329141857579"}})]),t._v(" "),s("h4",{attrs:{id:"偏向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#偏向锁"}},[t._v("#")]),t._v(" 偏向锁")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s2.loli.net/2022/04/09/v5QmD6UAzuyahg2.png",alt:"image-20210329143223539"}})]),t._v(" "),s("h4",{attrs:{id:"其他优化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他优化"}},[t._v("#")]),t._v(" 其他优化")]),t._v(" "),s("p",[t._v("①减少上锁时间：同步代码块中的代码尽量短")]),t._v(" "),s("p",[t._v("②减少锁的粒度")]),t._v(" "),s("blockquote",[s("p",[t._v("将一个锁拆分成多个锁，提高并发度")])]),t._v(" "),s("ul",[s("li",[t._v("ConcurrentHashMap")]),t._v(" "),s("li",[t._v("LongAdder 分为 base 和 cells 两部分。没有并发争用的时候或者是 cells 数组正在初始化的时候，会使用 CAS 来累加值到 base ，有并发争用，会初始化 cells 数组，数组有多少个 cell ，就允许有多少线程并行修改，最后将数组中每个 cell 累加，再加上 base 就是最终的值")]),t._v(" "),s("li",[t._v("LinkedBlockingQueue 入队和出队使用不同的锁，相对于 LinkedBlockingArray 只有一个锁效率要高")])]),t._v(" "),s("p",[t._v("在访问 hashmap 的时候，只锁住链表头，每次只锁住一个链表，其他链表的读取不受影响，相当于锁的粒度减少了，降低了上锁的难度。")]),t._v(" "),s("p",[t._v("③锁粗化")]),t._v(" "),s("ul",[s("li",[t._v("多次循环进入同步块不如同步块内多次循环")]),t._v(" "),s("li",[t._v("另外 JVM 可能会做相应的优化：把多次 append 的加锁操作粗化为一次（因为都是对同一个对象加锁，没必要重入多次）")])]),t._v(" "),s("div",{staticClass:"language-java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StringBuffer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"c"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("锁粗化在实际操作中使用比较多，在多次循环步骤需要加锁的时候，建议将锁加在循环外部，将整个循环部分放在锁的内部，减少上锁的次数，这就是属于锁粗化，避免在循环的时候，每进行一次循环，加一次锁。")]),t._v(" "),s("p",[t._v("④锁消除")]),t._v(" "),s("p",[t._v("JVM会进行代码的逃逸分析。例如某个加锁对象是方法的局部变量，不会被其他线程所访问到，这时候就会被即时编译器忽略掉所有同步操作。")]),t._v(" "),s("p",[t._v("⑤读写分离")]),t._v(" "),s("ul",[s("li",[t._v("CopyOnWriiteArrayList")]),t._v(" "),s("li",[t._v("CopyOnWriteSet")])])])}),[],!1,null,null,null);a.default=e.exports}}]);